plugins {
  id "io.gitlab.arturbosch.detekt" version "1.0.0.RC6-3"
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.novoda.android-command'
apply plugin: 'com.novoda.build-properties'
apply plugin: 'com.novoda.static-analysis'
apply plugin: 'net.ltgt.errorprone'
if (isPlay) {
  apply plugin: 'com.github.triplet.play'
  apply plugin: 'io.fabric'
}

buildProperties {
  signing.using(file('props/release.signing')) | file('props/debug.signing')
  secrets.using(file('props/secrets.properties'))
}

def secrets = buildProperties.secrets
def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()

android {
  compileSdkVersion versions.compileSdk

  defaultConfig {
    applicationId 'com.tasomaniac.openwith'
    minSdkVersion versions.minSdk
    targetSdkVersion versions.compileSdk
    versionCode versions.versionCode
    versionName versions.versionName
    buildConfigField 'String', 'GIT_SHA', "\"${gitSha}\""

    resConfigs 'ar', 'de', 'en', 'es', 'fr', 'hr', 'in', 'it', 'iw-rIL', 'ja', 'pl', 'pt-rBR', 'pt-rPT', 'ru', 'sv', 'tr', 'uk', 'vi', 'zh-rCN'

    javaCompileOptions.annotationProcessorOptions {
      arguments['butterknife.minSdk'] = minSdkVersion.apiString
      arguments['butterknife.debuggable'] = 'false'
    }
  }

  signingConfigs {
    debug.storeFile file('props/debug.keystore')
    release {
      def signing = buildProperties.signing
      storeFile file("props/${signing['storeFile'].string}")
      storePassword signing['storePassword'].string
      keyAlias signing['keyAlias'].string
      keyPassword signing['keyPassword'].string
    }
  }

  buildTypes {
    debug {
      ext.enableCrashlytics = false
      applicationIdSuffix '.debug'
      versionNameSuffix '-debug'
      signingConfig signingConfigs.debug
    }

    release {
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
      signingConfig signingConfigs.release
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  flavorDimensions 'store'
  productFlavors {
    floss {
      applicationIdSuffix '.floss'
      versionNameSuffix '-floss'
    }
    play {}
  }
}

staticAnalysis {
  penalty {
    maxWarnings = 10
    maxErrors = 0
  }

  detekt {
    profile('main') {
      config = 'props/detekt.yml'
      output = 'build/reports'
    }
  }

  lintOptions {
    textReport true
    textOutput 'stdout'

    checkAllWarnings true
    checkReleaseBuilds false

    lintConfig file('props/lint.xml')

    includeVariants { it.name == 'flossDebug' }
  }
}

if (isPlay) {
  play {
    serviceAccountEmail = secrets['play_service_account'].or('').string
    pk12File = file(secrets['play_key_file'].or('no_file.p12').string)
    track = 'alpha'
  }
}

configurations {
  implementation.exclude module: 'support-v4'
  compile.exclude module: 'support-v4'
}

dependencies {
  implementation 'com.google.code.findbugs:jsr305:3.0.2'
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$versions.kotlin"

  implementation "com.android.support:support-fragment:$versions.supportLib"
  implementation "com.android.support:appcompat-v7:$versions.supportLib"
  implementation "com.android.support:recyclerview-v7:$versions.supportLib"
  implementation "com.android.support:design:$versions.supportLib"
  implementation "com.android.support:preference-v14:$versions.supportLib"
  implementation 'com.duolingo.open:rtl-viewpager:1.0.3'

  implementation 'com.tasomaniac:delayed-progress:0.4'

  implementation "android.arch.lifecycle:extensions:$versions.arch"
  kapt "android.arch.lifecycle:compiler:$versions.arch"

  implementation "android.arch.persistence.room:runtime:$versions.room"
  implementation "android.arch.persistence.room:rxjava2:$versions.room"
  kapt "android.arch.persistence.room:compiler:$versions.room"

  implementation "com.google.dagger:dagger-android-support:$versions.dagger"
  kapt "com.google.dagger:dagger-compiler:$versions.dagger"
  kapt "com.google.dagger:dagger-android-processor:$versions.dagger"

  implementation "com.jakewharton:butterknife:$versions.butterKnife"
  kapt "com.jakewharton:butterknife-compiler:$versions.butterKnife"
  implementation 'com.jakewharton.timber:timber:4.7.0'

  implementation "com.squareup.okhttp3:okhttp:$versions.okHttp"
  implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
  implementation 'io.reactivex.rxjava2:rxjava:2.1.12'

  playImplementation 'com.crashlytics.sdk.android:crashlytics:2.9.1'

  testImplementation 'junit:junit:4.12'
  testImplementation 'org.mockito:mockito-core:2.18.0'
  testImplementation 'com.nhaarman:mockito-kotlin:1.5.0'
  testImplementation "com.squareup.okhttp3:mockwebserver:$versions.okHttp"
}

project.tasks.withType(JavaCompile) {
  options.compilerArgs += [
      '-Xep:UnnecessaryDefaultInEnumSwitch:ERROR',
      '-Xep:TypeParameterUnusedInFormals:ERROR',
      '-Xep:ClassCanBeStatic:ERROR',
      '-Xep:OperatorPrecedence:ERROR',
      '-Xep:ReferenceEquality:ERROR',
      '-Xep:FloatingPointLiteralPrecision:ERROR',
      '-XepDisableWarningsInGeneratedCode'
  ]
}
