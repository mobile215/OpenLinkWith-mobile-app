buildscript {
    ext.ci = 'true' == System.getenv('CI')
    ext.isPlay = project.hasProperty('play')
    ext.configFile = { fileName ->
        rootProject.file("gradle/$fileName")
    }

    def versionMajor = 2
    def versionMinor = 5
    def versionBuild = 5
    ext.playPublishTrack = 'internal'

    ext.versions = [
            compileSdk : 28,
            minSdk     : 19,
            versionCode: versionMajor * 10000 + versionMinor * 100 + versionBuild,
            versionName: "${versionMajor}.${versionMinor}",

            dagger     : '2.20',
            lifecycle  : '2.0.0',
            kotlin     : '1.3.11',
            okHttp     : '3.12.0',
            room       : '2.0.0',
    ]

    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
        jcenter {
            content {
                includeGroup 'org.jetbrains.trove4j'
            }
        }
        if (isPlay) {
            maven { url 'https://maven.fabric.io/public' }
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.0-alpha02'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.20.0'
        classpath 'com.github.triplet.gradle:play-publisher:2.0.0'
        classpath 'com.novoda:gradle-android-command-plugin:2.0.1'
        classpath 'com.novoda:gradle-build-properties-plugin:0.4.1'
        classpath 'io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.0.0-RC12'
        classpath 'org.jlleitschuh.gradle:ktlint-gradle:6.3.1'
        classpath 'com.novoda:gradle-static-analysis-plugin:0.8'
        if (isPlay) {
            classpath 'io.fabric.tools:gradle:1.27.0'
        }
    }
}

ext.ReporterType = org.jlleitschuh.gradle.ktlint.reporter.ReporterType
apply plugin: 'com.github.ben-manes.versions'

allprojects {
    repositories {
        google()
        mavenCentral()
        jcenter {
            content {
                includeGroup 'org.jetbrains.trove4j'
                includeGroup 'com.andreapivetta.kolor'
                includeGroup 'com.duolingo.open'
                includeGroup 'io.gitlab.arturbosch.detekt'
                includeGroup 'com.beust'
            }
        }
    }

    configurations.all {
        resolutionStrategy.eachDependency {
            if (requested.group == 'org.jetbrains.kotlin') {
                useVersion versions.kotlin
            }
        }
    }
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            if (selection.candidate.version ==~ /(?i).*[.-]alpha[.\d-]*/) {
                selection.reject('Release candidate')
            }
        }
    }
}
